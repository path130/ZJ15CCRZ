CSTOOL_PREFIX = /allwinner/arm_toolchain/external-toolchain/bin/arm-none-linux-gnueabi-
TARGET = $(notdir $(CURDIR))

# Comment this out if you want to see full compiler and linker output.
#override VERBOSE = @

QUAN_ZHI_LIB_DIR= ../quanzhi_lib
QUAN_ZHI_OSD_LIB_DIR= ../quan_zhi_osd_lib



JPEGLIB_INCLUDE= $(QUAN_ZHI_OSD_LIB_DIR)/jpeg
JPEGLIB_LIB=$(QUAN_ZHI_OSD_LIB_DIR)/jpeg



JRTPLIB_INCLUDE=$(QUAN_ZHI_OSD_LIB_DIR)/jrtp #temporately use C lib
JRTPLIB_LIB=$(QUAN_ZHI_OSD_LIB_DIR)/jrtp #temporately use C lib



APP_SRCDIR = .
UI_SRCDIR 	    = ./ui
OSD_SRCDIR 	    = ./osd
KEY_SRCDIR      = ./key
### delete by wrm 20141121
#SPI_SRCDIR      = ./spi
###
NET_SRCDIR  	= ./net
UART_SRCDIR  	= ./uart
TEXT_SRCDIR 	= ./ui/text
VIDEO_SRCDIR 	= ./video
AUDIO_SRCDIR 	= ./audio
UTILS_SRCDIR    = ./utils
SPEECH_SRCDIR   = ./speech
PUBLIC_SRCDIR   = ./public
DATABASE_SRCDIR = ./database
SQL_UILIB = sqlui
AES_SRCDIR = ./aes

SUB_SRCDIR := $(UART_SRCDIR) $(UI_SRCDIR) $(KEY_SRCDIR) $(NET_SRCDIR) $(TEXT_SRCDIR) $(VIDEO_SRCDIR) $(AUDIO_SRCDIR) $(SPEECH_SRCDIR) $(UTILS_SRCDIR) $(PUBLIC_SRCDIR)  $(DATABASE_SRCDIR) $(OSD_SRCDIR)
SRC_DIR:=$(APP_SRCDIR) $(SUB_SRCDIR) $(AES_SRCDIR)


C_FLAGS += -Wall -O2 -D_LINUX

C_FLAGS += -I$(APP_SRCDIR) 
C_FLAGS += -I$(UI_SRCDIR)  -I$(KEY_SRCDIR) -I$(NET_SRCDIR) -I$(UART_SRCDIR) -I$(TEXT_SRCDIR) -I$(VIDEO_SRCDIR) -I$(AUDIO_SRCDIR) -I$(SPEECH_SRCDIR) -I$(UTILS_SRCDIR) -I$(PUBLIC_SRCDIR) -I$(DATABASE_SRCDIR) -I$(OSD_SRCDIR) -I$(AES_SRCDIR)
C_FLAGS += -I$(JRTPLIB_INCLUDE) -I$(OSD_INCLUDE) -I$(JPEGLIB_INCLUDE) #-I$(SQLITE_INCLUDE)
C_FLAGS += -I./quanzhi_lib/include
C_FLAGS += -I ./code/include -I ./code/dpgraphic -I ./code/ui/cctrl -I ./code/phoneapp -I ./code/dpsession -I ./code


LD_FLAGS += -L$(JRTPLIB_LIB) -L$(JPEGLIB_LIB)
LD_FLAGS += -lpthread -lasound -ljthread -ljrtp -lfreetype -lz -ljpeg -lpng -lsqlite3
LD_FLAGS += -L./quanzhi_lib/lib

#ifeq ($(TARGET), ZJ15CCBHIP)  
#COMPILE.c = $(VERBOSE) $(CSTOOL_PREFIX)gcc $(C_FLAGS) -DFRONT_DOOR -c
#else
#ifeq ($(TARGET), ZJ15CCHIP_EMC)
#COMPILE.c = $(VERBOSE) $(CSTOOL_PREFIX)gcc $(C_FLAGS) -DEMC_TEST -c
#else 
#COMPILE.c = $(VERBOSE) $(CSTOOL_PREFIX)gcc $(C_FLAGS) $(CFLAGS)  -c
#endif
#endif  
COMPILE.c = $(VERBOSE) $(CSTOOL_PREFIX)gcc $(C_FLAGS) $(CFLAGS) -c
LINK.c = $(VERBOSE) $(CSTOOL_PREFIX)gcc $(LD_FLAGS)
AR.c = $(VERBOSE) $(CSTOOL_PREFIX)ar

SOURCES = $(foreach dir, $(SRC_DIR), $(wildcard $(dir)/*.c))
HEADERS = $(foreach dir, $(SRC_DIR), $(wildcard $(dir)/*.h))

OBJFILES = $(SOURCES:%.c=%.o)
#EXEC_BIN_DIR = /mnt/hgfs/ubuntu_work


.PHONY: clean install 

all: $(TARGET)

install:	$(if $(wildcard $(TARGET)), install_$(TARGET))

install_$(TARGET):
	@echo
	./makeappbin APP $(TARGET) P006 15CH WRM
	$(VERBOSE) cp $(TARGET).bin $(EXEC_BIN_DIR)/$(TARGET).bin
	@echo Installed $(TARGET) binaries to $(EXEC_BIN_DIR)..

package:
	cd ./upgrade_package && ./makepack.sh $(TARGET)

$(TARGET):	$(OBJFILES) ./libapp/libapp.a
	@echo Linking $@ from $^..
	$(LINK.c) -o $@ $^ -L${DATABASE_SRCDIR} -l$(SQL_UILIB)
	cp $(TARGET) //workspace/X3/nfsroot/X3_PUBLIC/opt/app/APP

$(OBJFILES):	%.o: %.c $(HEADERS)
	@echo Compiling $@ from $<..
	$(COMPILE.c) -o $@ $<	


clean:
	@echo Removing generated files..
	$(VERBOSE) -$(RM) -rf $(XDC_CFG) $(OBJFILES) $(TARGET) *~ *.d .dep

